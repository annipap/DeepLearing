In the Ex0 there were:
**pattern.py,** where you have to implement the classes Checker and Circle in this.
- Note that we do not provide any skeleton here. Also create s main.py", which imports all other classes.
- Import numpy for calculation and matplotlib for visualisation using import numpy as np and import matplotlib.pyplot as plt.
- This is the most common way to import those packages.\

**Checkerboard**, where the 1st pattern to implement is a checkerboard pattern in the class Checkers with adaptable tile size and resolution.
- Implement the constructor. It receives two arguments: an integer resolution that de nes
the number of pixels in each dimension, and an integer tile size that de nes the number
of pixel an individual tile has in each dimension. Store the arguments as public members.
Create an additional member variable output that can store the pattern.
- Implement the method draw() which creates the checkerboard pattern as a numpy array.
The tile in the top left corner should be black. In order to avoid truncated checkerboard
patterns, make sure your code only allows values for resolution that are evenly dividable
by 2  tile size. Store the pattern in the public member output and return a copy. Helpful
functions for that can be found on the Deep Learning Cheatsheet provided.
- Implement the method show() which shows the checkerboard pattern with for example
plt.imshow(). If you want to display a grayscale image you can use cmap = gray as
a parameter for this function.
- Verify your implementation visually by creating an object of this class in your main script
and calling the object's functions.
- Verify your implementation by calling the unit tests with TestCheckers.

**Circle**, where the second pattern to implement is a binary circle with a given radius at a speci ed position in the image. 
- Implement the constructor. It receives three arguments: An integer resolution, an
integer radius that describes the radius of the circle, and a tuple position that contains
the x- and y-coordinate of the circle center in the image.
- Implement the method draw() which creates a binary image of a circle as a numpy array.
Store the pattern in the public member output and return a copy.
- Implement the method show() which shows the circle with for example plt.imshow().
- Verify your implementation visually by creating an object of this class in your main script and calling the object's functions.
- Verify your implementation by calling the unit tests with TestCircle.

**Color Spectrum**, where the third pattern to implement is an RGB color spectrum. Once a class Spectrum is defined in pattern.py", the corresponding section in the unittests gets activated automatically.
- Implement the constructor. It receives one parameter: an integer resolution.
- Implement the method draw() which creates the spectrum in Fig. 3 as a numpy array. Remember that RGB images have 3 channels and that a spectrum consists of rising
values across a speci c dimension. For each color channel, the intensity minimum and maximum should be 0.0 and 1.0, respectively. Store the pattern in the public member
output and return a copy. Hint: Particularly take a look into the corners and their color, to  gure out the underlying distribution of the channels.
- Implement the method show() which shows the RGB spectrum with for example plt.imshow().
- Verify your implementation visually by creating an object of this class in your main script and calling the object's functions.
- Verify your implementation by calling the unit tests with TestSpectrum.

**Image Generator**
- Implement the class ImageGenerator in the generator.py.
Provide a constructor init () receiving
1. the path to the directory containing all images  le path as a string
2. the path to the JSON  le label path containing the labels again as string
3. an integer batch size de ning the number of images in a batch.
4. a list of integers de ning the desired image size [height,width,channel]
5. and optional bool, ags rotation, mirroring, shu e which default to False.
- The labels in the JSON  le are stored as a dictionary, where the key represents the
corresponding  lename of the images as a string (e.g. the key '15' corresponds to the
image 15.npy) and the value of each key stands for the respective class label encoded as
integer. (0 = 'airplane'; 1 = 'automobile'; 2 = 'bird'; 3 = 'cat'; 4 = 'deer'; 5 = 'dog'; 6
= 'frog'; 7 = 'horse'; 8 = 'ship'; 9 = 'truck' )
- Provide the method next(), which returns one batch of the provided dataset as a tuple
(images, labels), where images represents a batch of images and labels an array with the
corresponding labels, when called. Each image of your data set should be included only
once in those batches until the end of one epoch. One epoch describes a run through the
whole data set.
- Note: Sometimes the images fed into a neural network are  rst resized. Therefore, a
resizing option should be included within the next() method. Do not confuse resizing
with reshaping! Resizing usually involves interpolation of data, reshaping is the simple
reordering of data. It is allowed to use a library function for resizing (Hint: Have a look
into skimage.transform.resize).
- Implement the following functionalities for data manipulation and augmentation:
  - shuffle
  - mirroring
  - rotation
- Implement a method current epoch() which returns an integer of the current epoch. This number should be updated in the next() when we start to iterate through the data
set (again) from the beginning.
- Implement a method class name(int label), which returns the class name that corresponds to the integer label in the argument int label.
- Implement a method show() which generates a batch using next() and plots it. Use class name() to obtain the titles for the image plots.
- Verify your implementation visually by creating an object of this class in your main script and calling show().
- Verify the correct handling in next() by calling the unit tests with TestGen.
